{"version":3,"file":"static/webpack/static/development/pages/index.js.dfc2c2cdd016acd9b153.hot-update.js","sources":["webpack:///./lib/Pages.js"],"sourcesContent":["\n// Generated by Page Builder\nimport Page from './Page';\nimport _    from 'lodash';\n\nexport default {\n\n    $pages() {\n        return Object.values(this).filter(page => page instanceof Page);\n    },\n\n    $blogs() {\n        return this.$pages().filter(page => page.blog).sort(Page.compareDates);\n    },\n\n    $search(searchText) {\n        const regex   = new RegExp(_.escapeRegExp(_.escape(searchText)), 'i');\n        const results = [];\n        for (const page of this.$pages()) {\n            if (page.$searchRegex(regex)) {\n                results.push(page);\n            }\n        }\n        return results;\n    },\n\n    index: new Page({\n        name: 'index',\n        content: \"Mekpie is an opinionated build system for small scale C projects. The core premise of Mekpie is that you should not be spending time worrying about Make files, compiler arguments, or build times, when working on a small C project. By enforcing a simple directory structure and always providing a clean build, Mekpie saves you time and effort. For added convenience Mekpie takes notes from tools like [Rust's cargo](https://doc.rust-lang.org/cargo/guide/index.html) and [Node's npm](https://www.npmjs.com/) and provides options for building, running, cleaning, and testing your current project.\\n\\nMekpie is a small-scale project and is not supposed to replace tools like [CMake](https://cmake.org/) or provide any sort of package management capabilities. Use Mekpie when the alternative is a shoddy Make file or manually compiling.\\n\\nCurrently Mekpie supports the gcc, clang, avr-gcc, and emscripten compilers, as well as allows users to write custom compiler configurations.\\n\\n# Installing\\n\\nMekpie is a python package. Use pip to install it!\\n```lang:shell-readonly\\n$ pip install mekpie\\n```\\n\\n# Getting Started\\n\\nCreate a new project by running `mekpie new`. Mekpie will walk you through the configuration.\\n```lang:shell-readonly\\n$ mekpie new \\\"project-name\\\"\\n┌ Configuring mekpie...\\n│ Please provide a name for your project (default project-name):\\n│ Selected project-name.\\n│ Mekpie supports the following c compilers, please select one (compilers must be installed separately):\\n│     - gcc_clang   for use with the gcc or clang compiler\\n│     - emscripten  for use with the emscripten c to js compiler\\n│     - avr_gcc     for use with avr-gcc and avrdude\\n│ Please select a cc (default gcc_clang):\\n│ Selected gcc_clang.\\n│ ┌ Configuring gcc_clang...\\n│ │ Please select a compiler command (default cc):\\n│ │ Selected cc.\\n│ │ Please select a debug command (default lldb):\\n│ │ Selected lldb.\\n│ └ gcc_clang configured!\\n└ mekpie configured!\\nproject-name created successfully!\\n```\\n\\nThen navigate to the project directory and run\\n```lang:shell-readonly\\n$ mekpie run\\nProject successfully cleaned.\\nProject successfully built. (0.060s)\\nHello, World!\\n```\\n\\nThat's it!\\n\\n# Philosophy\\n\\nMekpie is built for the IDE free lifestyle. These days I do most of my development in [VSCode](https://code.visualstudio.com/) regardless of language. As a consequence, I am often writing small scripts to build my projects. Mekpie evolved from a python script I used in place of a Make file for my c projects. Rather than continuing to rewrite the script for every new project I decided to package this functionality together. Mekpie emphasizes simplicity and correctness over performance. Unlike most c build tools, which focus a great deal of effort on partial compilation, Mekpie recompiles the entire project from scratch every time you build, run, or test. This means that code is always fresh, and you will never have to run `mekpie clean` (though you still can if you want to remove the executables). For small programs the overhead of starting up python will be comparatively slower than the actual compilation times, so I believe this approach is a suitable one for many projects.\\n\\n# Creating a Project\\n\\nMekpie provides two commands for creating a project. `mekpie new` will attempt to create a new project as a subdirectory of your current location. You will have to provide Mekpie a name for your project. This name will be used as the name for the directory as well as the main `.c` file (don't worry you can change that later).\\n\\nAlternatively, you can use the `mekpie init` command to create a new project. In this case Mekpie will use the name of the current directory as the project name and setup the project in your current location. \\n\\n# Project Structure\\n\\nWhen you create a project using either `new` or `init` the following directory structure will be generated.\\n```lang:txt-readonly\\nproject/\\n    target/\\n    includes/\\n    src/\\n        project-name.c\\n    tests/\\n    mek.py\\n    .gitignore\\n```\\n\\nThe first folder generated by Mekpie, `target/`, is used to store the debug and release binaries generated for your program.\\n\\nThe `includes/` folder is automatically included as an includes directory to your compiler, so you can place any header files you want included in this directory. You can also place subdirectories within `includes/`.\\n\\nThe `src/` folder should contain all your `.c` files. Like `includes/` you can use subdirectories within. By default, a main file will be generated by Mekpie with a simple Hello World program to help you ensure everything is working correctly.\\n\\nThe `tests/` folder should contain all your test files. Jump [here](#testing) to find out more about tests.\\n\\nMekpie automatically generates a `.gitignore`, or appends to one that already exists. The final file created by Mekpie is `mek.py` which is a small python file that allows you to configure Mekpie.\\n\\n# Configuration\\n\\nConfiguration of Mekpie is done through the python file `mek.py` in the root of your project directory. Mekpie will autogenerate a file like the following when you first create a project. Release and debug flags are also automatically generated based on the selected compiler configuration.\\n\\n```lang:python-readonly\\n# This is a standard configuration file for mekpie\\n\\nname = 'project-name' \\nmain = 'project-name.c'\\ncc = gcc_clang(cmd='cc', dbg='lldb')\\nlibs = []\\nflags = []\\n\\nif options.release:\\n    flags += ['-Wall', '-O']\\nelse:\\n    flags += ['-Wall', '-g']\\n\\n```\\n\\nAs shown at the bottom of the configuration file, the command line options for the current build command will be provided to your configuration anytime it is read. This allows you to easily change your configuration depending on the build. In addition to release, the options object also provides `options.quiet`, `options.developer`, and `options.mode` which correspond to their respective command line flags.\\n\\nThe following table describes each `mek.py` variable in detail.\\n\\n| Variable | Default | Description |\\n|----------|---------|-------------|\\n| `name` | `<projectname>` | This is a default identifier for your project. |\\n| `main` | `<projectname>.c` | This should be the entry point for your main program. By default, it will point at the c file auto-generated by Mekpie. |\\n| `cc` | `gcc_clang(...)` | The c compiler configuration. Currently supported compilers include `gcc_clang`, `avr_gcc`, and `emscripten`. See [Compiler Configurations](#compilerconfiguration) for more details.\\n| `libs` | `[]` | Add any libraries you want linked with your project here. For instance, if you wanted to include the c math library you would change libs to `['m']`. |\\n| `flags` | `[]` | These flags will be passed to the compiler whenever a file is compiled. For instance, to always produce verbose output from the compiler, flags could be changed to `[-v]`. |\\n| `compileflags` | `[]` | These flags will **only** be passed to the compiler whenever an object is compiled. |\\n| `linkflags` | `[]` | These flags will **only** be passed to the compiler whenever a file is linked. |\\n\\n# Compiler Configuration\\n\\nMekpie provides three compiler configurations by default, `gcc_clang`, `gcc_avr`, and `emscripten`. The easiest way to get started with these is to use the configuration helper when running `mekpie new` or `mekpie init` and then selecting your desired compiler configuration, however these can be changed at any point.\\n\\n## `gcc_clang`\\n\\nThis compiler configuration is designed for use with the gcc compiler, clang compiler, and MinGW compiler. Insert the following code into `mek.py` to use this configuration\\n\\n```lang:python-readonly\\ncc = gcc_clang(\\n    cmd = 'cc',  # This shell command for your compiler\\n    dbg = 'gdb', # This shell command for your debugger\\n)\\n```\\n\\n## `avr_gcc`\\n\\nThis compiler configuration is designed for use with the AVR gcc compiler and avrdude. It will automatically compiler your code, convert it to hex format, and upload it via a serial port on your computer to a desired piece of hardware. This compiler configuration expects `avr-gcc` and `avrdude` to be available from the command line. Insert the following code into `mek.py` to use this configuration\\n\\n```lang:python-readonly\\ncc = avr_gcc(\\n    hardware   = 'atmega2560', # Your AVR hardware\\n    programmer = 'wiring',     # The programmer to use with avrdude\\n    baud       = '115200',     # The upload baud rate (default 115200)\\n)\\n```\\n\\n## `emscripten`\\n\\nThis compiler configuration is designed for use with the Emscripten c to js compiler. It expects `emcc` and `node` to be available from the command line. Insert the following code into `mek.py` to use this configuration\\n\\n```lang:python-readonly\\ncc = emscripten()\\n```\\n\\n## Custom Configuration\\n\\nThere is currently limited support for providing your own compiler configuration. This is done by implementing the `CompilerConfig` interface. For example\\n```lang:python-readonly\\ncc = CompilerConfig(\\n    name    = 'my_compiler_config', # The name of the config\\n    compile = my_compiler_function, # Your compile function\\n    link    = my_link_function,     # Your linking function\\n    run     = my_run_function,      # Your running function\\n    debug   = my_debug_function,    # Your debug function\\n    once    = my_once_function,     # Your once function\\n)\\n```\\n\\nEach function is passed the relevant variables to complete its expected task. As this feature is still in early development full documentation is not provided. See `/mekpie/cc_gcc_clang.py` for an example implementation.\\n\\n# Running\\n\\nTypically, you will skip running `mekpie build` when running your program, as building happens automatically for `mekpie run`, `mekpie debug`, and `mekpie test`. `mekpie run` will build and then execute the main file specified by your project [configuration](#configuration). You can specify a release build using `--release` or `-r`. You can provide program arguments to your main program by separating arguments to mekpie with `--`. Everything after this symbol will be passed to your program, rather than Mekpie. For example\\n\\n```shell\\n$ mekpie --release run -- ./some-path --flag 42\\n```\\n\\nUse `mekpie debug` if you want to start your program in your configured debugger. The usage of `mekpie test` is broken down in the next section.\\n\\n# Testing\\n\\nMekpie provides simple facilities for testing your code. Add a test by placing a `.c` file, with a main function, in `tests/`. For example, if you created a test file like the following and placed it in a file named `project-tests.c`\\n\\n```lang:c-readonly\\nvoid main() {\\n    test_one();\\n    test_two();\\n    test_three();\\n    ...\\n}\\n\\nvoid test_one() {\\n    assert ...\\n}\\n```\\n\\nYou could run those tests with either of the following commands\\n\\n```lang:shell-readonly\\n$ mekpie test\\n$ mekpie test project-tests\\n```\\n\\nYou can provide any number of test names to the test command. All of these tests will be run. Alternatively, providing no test names will simply run all of the tests. Test files are compiled just like your program's main file, meaning they have access to all of your project's header files.\\n\\n# Commands\\n\\nNote that in usage examples flags are provided before the command, however flags are not required to appear before a command unless that command takes an arbitrary number of arguments, such as `mekpie test` which accepts any number of test names. \\n\\n## `new`\\n\\nCreates a new project in a subdirectory of the provided name. The command will fail if the subdirectory already exists. If you want to initialize Mekpie in an already created directory us `mekpie init` instead. \\n\\nThis command will create all of the necessary files to use `mekpie run` to build and run a simple Hello World program in c.\\n\\nUsage\\n```lang:shell-readonly\\n$ mekpie [--changedir|--developer] new <project-name>\\n```\\n\\n## `init`\\n\\nBehaves just like `mekpie new` accept initializes the project in the current directory. The current directory's name will be used as the project name.\\n\\nUsage\\n```lang:shell-readonly\\n$ mekpie [--changedir|--developer] init\\n```\\n\\n## `test`\\n\\nWhen no test names are provided this command will run all files contained in `tests/`. If test names are provided only those test files whose names are included will be run. Any number of test names can be provided.\\n\\nUsage\\n```lang:shell-readonly\\n$ mekpie [--release|--quiet|--changedir|--developer] test [test-names...]\\n```\\n\\n## `clean`\\n\\nRemoves all existing executables from `target/`.\\n\\nUsage\\n```lang:shell-readonly\\n$ mekpie [--changedir|--developer] clean\\n```\\n\\n## `build`\\n\\nAttempts to create an executable in `target/`.\\n\\nUsage\\n```lang:shell-readonly\\n$ mekpie [--release|--quiet|--changedir|--developer|--mode] build\\n```\\n\\n## `run`\\n\\nCleans, builds, and then runs the main file of the project. The main file of a project is specified in the project configuration.\\n\\nUsage\\n```lang:shell-readonly\\n$ mekpie [--release|--quiet|--changedir|--developer|--mode] run\\n```\\n\\n## `debug`\\n\\nCleans, builds, and then runs the debugger on the main file of the project.\\n\\nUsage\\n```lang:shell-readonly\\n$ mekpie [--quiet|--changedir|--developer|--mode] debug\\n```\\n\\n## `dist`\\n\\nCleans, builds, and then copies an executable into the project root. The executable will be given the same name as the project.\\n\\nUsage\\n```lang:shell-readonly\\n$ mekpie [--release|--quite|--changdir|--developer|--mode] dist\\n```\\n\\n# Options\\n\\nThe following table describes Mekpie's command line options.\\n\\n| Option  | Flag | Description |\\n|---------|------|-------------|\\n| `help` | `-h` | Displays a command line usage help message. |\\n| `version` | `-V` | Prints version info and exits. |\\n| `mode` | `-m` | Provide a mode to the mekpie file. |\\n| `quiet` | `-q` | This will suppress information from being printed to stdout. |\\n| `release` | `-r` | When applicable the build will be done with the release configuration. By default, builds are done with the debug configuration. |\\n| `developer` | `-d` | Runs Mekpie in developer mode. This produces additional logging and stack traces on errors. |\\n| `changedir` | `-c` | Runs Mekpie command as if it had been invoked from the provided directory. Provide a path immediately after this flag. |   \\n\\n# Contact\\n\\nFeel free to send be bug reports or feature requests. If you are interested in my other work, checkout my [website](https://ejrbuss.net).\\n\\nEmail root@ejrbuss.net\\n\",\n        plainTxt: 'Mekpie is an opinionated build system for small scale C projects. The core premise of Mekpie is that you should not be spending time worrying about Make files, compiler arguments, or build times, when working on a small C project. By enforcing a simple directory structure and always providing a clean build, Mekpie saves you time and effort. For added convenience Mekpie takes notes from tools like Rust&amp;#39;s cargo and Node&amp;#39;s npm and provides options for building, running, cleaning, and testing your current project.\\nMekpie is a small-scale project and is not supposed to replace tools like CMake or provide any sort of package management capabilities. Use Mekpie when the alternative is a shoddy Make file or manually compiling.\\nCurrently Mekpie supports the gcc, clang, avr-gcc, and emscripten compilers, as well as allows users to write custom compiler configurations.\\nInstalling\\nMekpie is a python package. Use pip to install it!\\n$ pip install mekpie\\nGetting Started\\nCreate a new project by running mekpie new. Mekpie will walk you through the configuration.\\n$ mekpie new &quot;project-name&quot;\\n┌ Configuring mekpie...\\n│ Please provide a name for your project (default project-name):\\n│ Selected project-name.\\n│ Mekpie supports the following c compilers, please select one (compilers must be installed separately):\\n│     - gcc_clang   for use with the gcc or clang compiler\\n│     - emscripten  for use with the emscripten c to js compiler\\n│     - avr_gcc     for use with avr-gcc and avrdude\\n│ Please select a cc (default gcc_clang):\\n│ Selected gcc_clang.\\n│ ┌ Configuring gcc_clang...\\n│ │ Please select a compiler command (default cc):\\n│ │ Selected cc.\\n│ │ Please select a debug command (default lldb):\\n│ │ Selected lldb.\\n│ └ gcc_clang configured!\\n└ mekpie configured!\\nproject-name created successfully!\\nThen navigate to the project directory and run\\n$ mekpie run\\nProject successfully cleaned.\\nProject successfully built. (0.060s)\\nHello, World!\\nThat&amp;#39;s it!\\nPhilosophy\\nMekpie is built for the IDE free lifestyle. These days I do most of my development in VSCode regardless of language. As a consequence, I am often writing small scripts to build my projects. Mekpie evolved from a python script I used in place of a Make file for my c projects. Rather than continuing to rewrite the script for every new project I decided to package this functionality together. Mekpie emphasizes simplicity and correctness over performance. Unlike most c build tools, which focus a great deal of effort on partial compilation, Mekpie recompiles the entire project from scratch every time you build, run, or test. This means that code is always fresh, and you will never have to run mekpie clean (though you still can if you want to remove the executables). For small programs the overhead of starting up python will be comparatively slower than the actual compilation times, so I believe this approach is a suitable one for many projects.\\nCreating a Project\\nMekpie provides two commands for creating a project. mekpie new will attempt to create a new project as a subdirectory of your current location. You will have to provide Mekpie a name for your project. This name will be used as the name for the directory as well as the main .c file (don&amp;#39;t worry you can change that later).\\nAlternatively, you can use the mekpie init command to create a new project. In this case Mekpie will use the name of the current directory as the project name and setup the project in your current location. \\nProject Structure\\nWhen you create a project using either new or init the following directory structure will be generated.\\nproject/\\n    target/\\n    includes/\\n    src/\\n        project-name.c\\n    tests/\\n    mek.py\\n    .gitignore\\nThe first folder generated by Mekpie, target/, is used to store the debug and release binaries generated for your program.\\nThe includes/ folder is automatically included as an includes directory to your compiler, so you can place any header files you want included in this directory. You can also place subdirectories within includes/.\\nThe src/ folder should contain all your .c files. Like includes/ you can use subdirectories within. By default, a main file will be generated by Mekpie with a simple Hello World program to help you ensure everything is working correctly.\\nThe tests/ folder should contain all your test files. Jump here to find out more about tests.\\nMekpie automatically generates a .gitignore, or appends to one that already exists. The final file created by Mekpie is mek.py which is a small python file that allows you to configure Mekpie.\\nConfiguration\\nConfiguration of Mekpie is done through the python file mek.py in the root of your project directory. Mekpie will autogenerate a file like the following when you first create a project. Release and debug flags are also automatically generated based on the selected compiler configuration.\\n# This is a standard configuration file for mekpie\\n\\nname = &#39;project-name&#39; \\nmain = &#39;project-name.c&#39;\\ncc = gcc_clang(cmd=&#39;cc&#39;, dbg=&#39;lldb&#39;)\\nlibs = []\\nflags = []\\n\\nif options.release:\\n    flags += [&#39;-Wall&#39;, &#39;-O&#39;]\\nelse:\\n    flags += [&#39;-Wall&#39;, &#39;-g&#39;]\\n\\nAs shown at the bottom of the configuration file, the command line options for the current build command will be provided to your configuration anytime it is read. This allows you to easily change your configuration depending on the build. In addition to release, the options object also provides options.quiet, options.developer, and options.mode which correspond to their respective command line flags.\\nThe following table describes each mek.py variable in detail.\\nVariable\\nDefault\\nDescription\\n\\n\\nname\\n&amp;lt;projectname&amp;gt;\\nThis is a default identifier for your project.\\n\\nmain\\n&amp;lt;projectname&amp;gt;.c\\nThis should be the entry point for your main program. By default, it will point at the c file auto-generated by Mekpie.\\n\\ncc\\ngcc_clang(...)\\nThe c compiler configuration. Currently supported compilers include gcc_clang, avr_gcc, and emscripten. See Compiler Configurations for more details.\\n\\nlibs\\n[]\\nAdd any libraries you want linked with your project here. For instance, if you wanted to include the c math library you would change libs to [&amp;#39;m&amp;#39;].\\n\\nflags\\n[]\\nThese flags will be passed to the compiler whenever a file is compiled. For instance, to always produce verbose output from the compiler, flags could be changed to [-v].\\n\\ncompileflags\\n[]\\nThese flags will only be passed to the compiler whenever an object is compiled.\\n\\nlinkflags\\n[]\\nThese flags will only be passed to the compiler whenever a file is linked.\\n\\n\\nCompiler Configuration\\nMekpie provides three compiler configurations by default, gcc_clang, gcc_avr, and emscripten. The easiest way to get started with these is to use the configuration helper when running mekpie new or mekpie init and then selecting your desired compiler configuration, however these can be changed at any point.\\ngcc_clang\\nThis compiler configuration is designed for use with the gcc compiler, clang compiler, and MinGW compiler. Insert the following code into mek.py to use this configuration\\ncc = gcc_clang(\\n    cmd = &#39;cc&#39;,  # This shell command for your compiler\\n    dbg = &#39;gdb&#39;, # This shell command for your debugger\\n)\\navr_gcc\\nThis compiler configuration is designed for use with the AVR gcc compiler and avrdude. It will automatically compiler your code, convert it to hex format, and upload it via a serial port on your computer to a desired piece of hardware. This compiler configuration expects avr-gcc and avrdude to be available from the command line. Insert the following code into mek.py to use this configuration\\ncc = avr_gcc(\\n    hardware   = &#39;atmega2560&#39;, # Your AVR hardware\\n    programmer = &#39;wiring&#39;,     # The programmer to use with avrdude\\n    baud       = &#39;115200&#39;,     # The upload baud rate (default 115200)\\n)\\nemscripten\\nThis compiler configuration is designed for use with the Emscripten c to js compiler. It expects emcc and node to be available from the command line. Insert the following code into mek.py to use this configuration\\ncc = emscripten()\\nCustom Configuration\\nThere is currently limited support for providing your own compiler configuration. This is done by implementing the CompilerConfig interface. For example\\ncc = CompilerConfig(\\n    name    = &#39;my_compiler_config&#39;, # The name of the config\\n    compile = my_compiler_function, # Your compile function\\n    link    = my_link_function,     # Your linking function\\n    run     = my_run_function,      # Your running function\\n    debug   = my_debug_function,    # Your debug function\\n    once    = my_once_function,     # Your once function\\n)\\nEach function is passed the relevant variables to complete its expected task. As this feature is still in early development full documentation is not provided. See /mekpie/cc_gcc_clang.py for an example implementation.\\nRunning\\nTypically, you will skip running mekpie build when running your program, as building happens automatically for mekpie run, mekpie debug, and mekpie test. mekpie run will build and then execute the main file specified by your project configuration. You can specify a release build using --release or -r. You can provide program arguments to your main program by separating arguments to mekpie with --. Everything after this symbol will be passed to your program, rather than Mekpie. For example\\n$ mekpie --release run -- ./some-path --flag 42\\nUse mekpie debug if you want to start your program in your configured debugger. The usage of mekpie test is broken down in the next section.\\nTesting\\nMekpie provides simple facilities for testing your code. Add a test by placing a .c file, with a main function, in tests/. For example, if you created a test file like the following and placed it in a file named project-tests.c\\nvoid main() {\\n    test_one();\\n    test_two();\\n    test_three();\\n    ...\\n}\\n\\nvoid test_one() {\\n    assert ...\\n}\\nYou could run those tests with either of the following commands\\n$ mekpie test\\n$ mekpie test project-tests\\nYou can provide any number of test names to the test command. All of these tests will be run. Alternatively, providing no test names will simply run all of the tests. Test files are compiled just like your program&amp;#39;s main file, meaning they have access to all of your project&amp;#39;s header files.\\nCommands\\nNote that in usage examples flags are provided before the command, however flags are not required to appear before a command unless that command takes an arbitrary number of arguments, such as mekpie test which accepts any number of test names. \\nnew\\nCreates a new project in a subdirectory of the provided name. The command will fail if the subdirectory already exists. If you want to initialize Mekpie in an already created directory us mekpie init instead. \\nThis command will create all of the necessary files to use mekpie run to build and run a simple Hello World program in c.\\nUsage\\n$ mekpie [--changedir|--developer] new &lt;project-name&gt;\\ninit\\nBehaves just like mekpie new accept initializes the project in the current directory. The current directory&amp;#39;s name will be used as the project name.\\nUsage\\n$ mekpie [--changedir|--developer] init\\ntest\\nWhen no test names are provided this command will run all files contained in tests/. If test names are provided only those test files whose names are included will be run. Any number of test names can be provided.\\nUsage\\n$ mekpie [--release|--quiet|--changedir|--developer] test [test-names...]\\nclean\\nRemoves all existing executables from target/.\\nUsage\\n$ mekpie [--changedir|--developer] clean\\nbuild\\nAttempts to create an executable in target/.\\nUsage\\n$ mekpie [--release|--quiet|--changedir|--developer|--mode] build\\nrun\\nCleans, builds, and then runs the main file of the project. The main file of a project is specified in the project configuration.\\nUsage\\n$ mekpie [--release|--quiet|--changedir|--developer|--mode] run\\ndebug\\nCleans, builds, and then runs the debugger on the main file of the project.\\nUsage\\n$ mekpie [--quiet|--changedir|--developer|--mode] debug\\ndist\\nCleans, builds, and then copies an executable into the project root. The executable will be given the same name as the project.\\nUsage\\n$ mekpie [--release|--quite|--changdir|--developer|--mode] dist\\nOptions\\nThe following table describes Mekpie&amp;#39;s command line options.\\nOption\\nFlag\\nDescription\\n\\n\\nhelp\\n-h\\nDisplays a command line usage help message.\\n\\nversion\\n-V\\nPrints version info and exits.\\n\\nmode\\n-m\\nProvide a mode to the mekpie file.\\n\\nquiet\\n-q\\nThis will suppress information from being printed to stdout.\\n\\nrelease\\n-r\\nWhen applicable the build will be done with the release configuration. By default, builds are done with the debug configuration.\\n\\ndeveloper\\n-d\\nRuns Mekpie in developer mode. This produces additional logging and stack traces on errors.\\n\\nchangedir\\n-c\\nRuns Mekpie command as if it had been invoked from the provided directory. Provide a path immediately after this flag.\\n\\n\\nContact\\nFeel free to send be bug reports or feature requests. If you are interested in my other work, checkout my website.\\nEmail root@ejrbuss.net\\n',\n        route: '/index',\n        layout: '../layouts/Docs',\n        title: 'Mekpie',\n        subtitle: 'make building C as simple as pie',\n        version: 'v0.1.9',\n    }),\n\n};\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AArBA;;;;A","sourceRoot":""}